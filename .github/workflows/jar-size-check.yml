name: Jar size check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR (skip tests for speed)
        run: ./gradlew clean bootJar -x test --no-daemon

      - name: Find built JAR
        id: find_jar
        run: |
          jar=$(ls build/libs/*.jar 2>/dev/null | head -n 1 || true)
          if [ -z "$jar" ]; then
            echo "No jar found in build/libs"
            exit 1
          fi
          echo "jar_path=$jar" >> $GITHUB_OUTPUT

      - name: Calculate current JAR size
        id: sizes
        run: |
          jar_path="${{ steps.find_jar.outputs.jar_path }}"
          # prefer GNU stat (-c%s), fallback to BSD stat (-f%z)
          if stat -c%s "$jar_path" >/dev/null 2>&1; then
            bytes=$(stat -c%s "$jar_path")
          else
            bytes=$(stat -f%z "$jar_path")
          fi
          # human readable
          if command -v numfmt >/dev/null 2>&1; then
            human=$(numfmt --to=iec $bytes)
          else
            human="${bytes}B"
          fi
          echo "jar_bytes=$bytes" >> $GITHUB_OUTPUT
          echo "jar_human=$human" >> $GITHUB_OUTPUT

      - name: Upload built JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: ${{ steps.find_jar.outputs.jar_path }}

      - name: Compare to previous successful run
        id: compare
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAR_BYTES: ${{ steps.sizes.outputs.jar_bytes }}
          JAR_HUMAN: ${{ steps.sizes.outputs.jar_human }}
          REPO: ${{ github.repository }}
          WORKFLOW_FILE: jar-size-check.yml
        run: |
          set -euo pipefail
          owner_repo="$REPO"
          owner="${owner_repo%%/*}"
          repo="${owner_repo#*/}"
          current_run_id="$GITHUB_RUN_ID"

          echo "Current jar bytes: $JAR_BYTES"

          # Fetch recent runs of this workflow (no pagination - check last 50)
          resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$owner/$repo/actions/workflows/$WORKFLOW_FILE/runs?per_page=50")
          runs=$(echo "$resp" | jq '.workflow_runs')
          count=$(echo "$runs" | jq 'length')

          prev_found=""
          prev_bytes=""
          prev_human=""

          for i in $(seq 0 $(($count-1))); do
            run_id=$(echo "$runs" | jq -r ".[$i].id")
            conclusion=$(echo "$runs" | jq -r ".[$i].conclusion")
            if [ "$run_id" = "$current_run_id" ]; then
              continue
            fi
            if [ "$conclusion" != "success" ]; then
              continue
            fi

            art_resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id/artifacts")
            art_count=$(echo "$art_resp" | jq '.artifacts | length')
            for j in $(seq 0 $(($art_count-1))); do
              name=$(echo "$art_resp" | jq -r ".artifacts[$j].name")
              if [ "$name" = "built-jar" ]; then
                artifact_id=$(echo "$art_resp" | jq -r ".artifacts[$j].id")
                download_url="https://api.github.com/repos/$owner/$repo/actions/artifacts/$artifact_id/zip"
                echo "Found built-jar in run $run_id (artifact $artifact_id), downloading..."
                curl -s -L -H "Authorization: token $GITHUB_TOKEN" -o prev_artifact.zip "$download_url"
                mkdir -p prev_art
                unzip -q prev_artifact.zip -d prev_art
                prev_jar=$(find prev_art -name '*.jar' | head -n 1 || true)
                if [ -n "$prev_jar" ]; then
                  if stat -c%s "$prev_jar" >/dev/null 2>&1; then
                    prev_bytes=$(stat -c%s "$prev_jar")
                  else
                    prev_bytes=$(stat -f%z "$prev_jar")
                  fi
                  if command -v numfmt >/dev/null 2>&1; then
                    prev_human=$(numfmt --to=iec $prev_bytes)
                  else
                    prev_human="${prev_bytes}B"
                  fi
                  prev_found=1
                  break 2
                fi
              fi
            done
          done

          if [ -z "$prev_found" ]; then
            summary="Current JAR: ${JAR_HUMAN} (${JAR_BYTES} bytes)\nNo previous built-jar found for comparison."
          else
            diff=$((JAR_BYTES - prev_bytes))
            sign=""
            if [ "$diff" -gt 0 ]; then sign="+"; fi
            if [ "$diff" -lt 0 ]; then sign="-"; fi
            abs_diff=${diff#-}
            if command -v numfmt >/dev/null 2>&1; then
              diff_human=$(numfmt --to=iec $abs_diff)
            else
              diff_human="${abs_diff}B"
            fi
            summary="Current JAR: ${JAR_HUMAN} (${JAR_BYTES} bytes)\nPrevious JAR: ${prev_human} (${prev_bytes} bytes)\nDelta: ${sign}${diff_human} (${sign}${abs_diff} bytes)"
          fi

          echo -e "$summary"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          PR_NUMBER=${{ github.event.pull_request.number }}
          summary="${{ steps.compare.outputs.summary }}"
          # build JSON safely using python3 to avoid escaping issues
          json=$(python3 - <<PY
import json,sys
body=sys.stdin.read()
print(json.dumps({"body": body}))
PY
<<EOF
$summary
EOF
)
          curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$json" "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments"
